//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputActions/TankInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TankInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TankInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TankInput"",
    ""maps"": [
        {
            ""name"": ""Tank"",
            ""id"": ""8909a44f-a74d-4586-87e3-c0f4a42f269d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""18410a5f-ceaa-42a7-84ef-e8a805b77df5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateHull"",
                    ""type"": ""Value"",
                    ""id"": ""8d8567c3-388a-458f-b864-0d0d5a3bac4a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""543d4e9e-9ce1-4732-a0ab-a86a86389a47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""7a051b48-5944-417c-9e64-521be1a99f37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""88700f9a-cc46-4dbb-b9cc-f89033813bc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cc2bcfd5-70a5-40ee-8646-0a9dc5b4af1a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""52fe5ba2-3943-4a03-9029-8b3a99946464"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6bb480f1-020b-4a65-98ad-f0b31d5ff375"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f8e89a62-1ee4-4b71-aa9a-cb90c98ed2c3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateHull"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dba7f67d-3058-4f66-a24c-be39fa7f3a66"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateHull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6e692a05-d3b0-48b4-8145-83c4c605e553"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateHull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4cba8f3c-86fc-4b05-ac28-2ea1a897a3fe"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3eb7c96-4b63-4788-a688-61d55240b8eb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c9dfbc2-6eee-4c67-b298-7d22ecc23641"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tank
        m_Tank = asset.FindActionMap("Tank", throwIfNotFound: true);
        m_Tank_Move = m_Tank.FindAction("Move", throwIfNotFound: true);
        m_Tank_RotateHull = m_Tank.FindAction("RotateHull", throwIfNotFound: true);
        m_Tank_Shoot = m_Tank.FindAction("Shoot", throwIfNotFound: true);
        m_Tank_ChangeWeapon1 = m_Tank.FindAction("ChangeWeapon1", throwIfNotFound: true);
        m_Tank_ChangeWeapon2 = m_Tank.FindAction("ChangeWeapon2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tank
    private readonly InputActionMap m_Tank;
    private ITankActions m_TankActionsCallbackInterface;
    private readonly InputAction m_Tank_Move;
    private readonly InputAction m_Tank_RotateHull;
    private readonly InputAction m_Tank_Shoot;
    private readonly InputAction m_Tank_ChangeWeapon1;
    private readonly InputAction m_Tank_ChangeWeapon2;
    public struct TankActions
    {
        private @TankInput m_Wrapper;
        public TankActions(@TankInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Tank_Move;
        public InputAction @RotateHull => m_Wrapper.m_Tank_RotateHull;
        public InputAction @Shoot => m_Wrapper.m_Tank_Shoot;
        public InputAction @ChangeWeapon1 => m_Wrapper.m_Tank_ChangeWeapon1;
        public InputAction @ChangeWeapon2 => m_Wrapper.m_Tank_ChangeWeapon2;
        public InputActionMap Get() { return m_Wrapper.m_Tank; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankActions set) { return set.Get(); }
        public void SetCallbacks(ITankActions instance)
        {
            if (m_Wrapper.m_TankActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnMove;
                @RotateHull.started -= m_Wrapper.m_TankActionsCallbackInterface.OnRotateHull;
                @RotateHull.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnRotateHull;
                @RotateHull.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnRotateHull;
                @Shoot.started -= m_Wrapper.m_TankActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnShoot;
                @ChangeWeapon1.started -= m_Wrapper.m_TankActionsCallbackInterface.OnChangeWeapon1;
                @ChangeWeapon1.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnChangeWeapon1;
                @ChangeWeapon1.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnChangeWeapon1;
                @ChangeWeapon2.started -= m_Wrapper.m_TankActionsCallbackInterface.OnChangeWeapon2;
                @ChangeWeapon2.performed -= m_Wrapper.m_TankActionsCallbackInterface.OnChangeWeapon2;
                @ChangeWeapon2.canceled -= m_Wrapper.m_TankActionsCallbackInterface.OnChangeWeapon2;
            }
            m_Wrapper.m_TankActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @RotateHull.started += instance.OnRotateHull;
                @RotateHull.performed += instance.OnRotateHull;
                @RotateHull.canceled += instance.OnRotateHull;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ChangeWeapon1.started += instance.OnChangeWeapon1;
                @ChangeWeapon1.performed += instance.OnChangeWeapon1;
                @ChangeWeapon1.canceled += instance.OnChangeWeapon1;
                @ChangeWeapon2.started += instance.OnChangeWeapon2;
                @ChangeWeapon2.performed += instance.OnChangeWeapon2;
                @ChangeWeapon2.canceled += instance.OnChangeWeapon2;
            }
        }
    }
    public TankActions @Tank => new TankActions(this);
    public interface ITankActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotateHull(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnChangeWeapon1(InputAction.CallbackContext context);
        void OnChangeWeapon2(InputAction.CallbackContext context);
    }
}
